import io.pivotal.pal.tracker.gradlebuild.DependenciesGraphPlugin

buildscript {
    ext {
        springBootVersion = "1.5.7.RELEASE"
        springVersion = "4.3.8.RELEASE"
        mysqlVersion = "6.0.6"
        springCloudDependenciesVersion = "Edgware.RELEASE"
        springCloudServicesVersion = "1.6.0.RELEASE"
    }

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "mysql:mysql-connector-java:$mysqlVersion"
    }
}

apply plugin: DependenciesGraphPlugin

subprojects {
    group "io.pivotal.pal.tracker"

    apply plugin: "java"
    defaultTasks "clean", "build"

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        compile "com.fasterxml.jackson.core:jackson-core:2.8.4"
        compile "com.fasterxml.jackson.core:jackson-databind:2.8.4"
        compile "com.fasterxml.jackson.core:jackson-annotations:2.8.4"
        compile "org.slf4j:slf4j-api:1.7.10"

        testCompile "junit:junit:4.12"
        testCompile "org.mockito:mockito-core:2.2.26"
        testCompile "org.assertj:assertj-core:3.8.0"
    }
}

def executeWithPrint(cmd) {
    println cmd
    println cmd.execute().text
}

task cfSetup() {

    doLast {
        [
                "cf create-service p-mysql 100mb tracker-allocations-database",
                "cf create-service p-mysql 100mb tracker-backlog-database",
                "cf create-service p-mysql 100mb tracker-registration-database",
                "cf create-service p-mysql 100mb tracker-timesheets-database",
                "cf create-service p-service-registry standard tracker-service-registry",
                "fly -t pal-concourse set-pipeline -p pal-tracker-distributed --load-vars-from ci/variables.yml -c ci/pipeline.yml"
        ].each { executeWithPrint(it) }
    }
}

def deleteApplication(app, database) {

    [
            "cf unbind-service $app $database",
            "cf delete-service $database -f",
            "cf unbind-service $app tracker-service-registry",
            "cf delete $app -r -f"
    ].each { executeWithPrint(it) }
}


task cfTeardown() {

    doLast {
        deleteApplication("tracker-allocations", "tracker-allocations-database")
        deleteApplication("tracker-backlog", "tracker-backlog-database")
        deleteApplication("tracker-registration", "tracker-registration-database")
        deleteApplication("tracker-timesheets", "tracker-timesheets-database")

        [
                "cf delete-service tracker-service-registry -f",
                "fly -t pal-concourse destroy-pipeline -p pal-tracker-distributed"
        ].each { executeWithPrint(it) }
    }
}
